#!/usr/bin/perl
	$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin';

#
#	Make sure we can read the master configuration file.
#
	 if (!(-e '/etc/munin/munin.conf')) {
		print "This command MUST be run on a munin master node. If this is a munin master node,\n";
		print "mg is unable to find the /etc/munin/munin.conf configuration file.\n";
		exit;
	 }

#
#	Set parameter defaults.
#
	$tval = 0;			# default time
	$rval = 0;			# default range
	$hval = '';			# no default host
	$sval = '';			# no default service
	$Hval = 600;		# default height
	$Wval = 1200;		# default width
	$Fval = 'png';		# default image format
	$cval = 0;			# default copy flag
	$nval = 0;			# default caption flag

#
#	Process command arguments.
#
	while (@ARGV) {
		$key = shift();
		$tval = abs(shift()) if $key eq '-t';
		$rval = shift() if $key eq '-r';
		$hval = shift() if $key eq '-h';
		$sval = shift() if $key eq '-s';
		$Hval = shift() if $key eq '-H';
		$Wval = shift() if $key eq '-W';
		$Fval = shift() if $key eq '-F';
		$cval = $cval ^ 1 if $key eq '-c';
		$nval = $nval ^ 1 if $key eq '-n';
	}

#
#	Print command help if mandtory parameters missing.
#
	if ($hval eq '' || $sval eq '') {
		print "Generate Munin graphs.\n\nSynopsis: mg -h hostname -s service [-t timeinsec] [-r rangeinhrs | 30] [-H height] [-W width] [-c]\n\n";
		print "mg will save the requested graph in '$ENV{'HOME'}/mg/current.png'. If the '-c' option is specified, a copy\n";
		print "of 'current.png' will be made and saved in '$ENV{'HOME'}/mg/<hostname>-<service>-<timeinsec>-<rangeinhrs>.png'\n";
		print "Specfying a 'timeinsec' value of zero will graph the last 'rangeinhrs' of data and display the start\ntime.\n\n";
		exit;
	}

#
#	Locate the munin master data directory via the master configuration file.
#

	 @x = `awk '/dbdir/' /etc/munin/munin.conf`;
	 if ($#x>-1) {
		@y = split(/[\s\n]+/, $x[0]);
		$DBdir = $y[$#y];
	 } else {
		$DBdir = '/var/lib/munin';
	 }

#
#	Retrieve and validate hosts and services.
#
	 @x = `awk 'BEGIN{FS=";"} {print \$2}' $DBdir/datafile`;
	 for ($i=0; $i<=$#x; $i++) {
		($host, $x) = split(/[:]/, $x[$i]);
		$Hosts{$host} = 1 if $host =~ /[a-zA-Z0-9]/;
		($service) = split(/[.]/, $x);
		$Services{$service} = 1 if $service =~ /[a-zA-Z0-9]/;
	 }

	 if(!defined($Hosts{$hval})) {
		print "Invalid hostname ($hval) value specified. Choose from one of the following:\n\n";
		$Hosts = join(", ", sort(keys(%Hosts)));
		print "$Hosts\n\n";
		print "Not all combinations of hostname and service are valid.\n";
		exit;
	 }

	 if(!defined($Services{$sval})) {
		print "Invalid service ($sval) value specified. Choose from one of the following:\n\n";
		$Services = join(", ", sort(keys(%Services)));
		print "$Services\n\n";
		print "Not all combinations of hostname and service are valid.\n";
		exit;
	 }

#
#	Finalize time range.
#
	$time = $tval * 1;
	$range = $rval * 3600;

	$now = `date +%s`;
	$end = "'0'\\\n";
	if ($time == 0 && $range == 0) {
		$time = $now - (30 * 3600);
		$range = 0;
	} elsif ($time == 0) {
		$time = $now - $range;
		print "Base time set to: $time\n";
		$range = 0;
	} elsif ($range >= ($now - $time)) {
		$range = 0;
	}

	$start = sprintf("'-%dh'\\\n", int(($now + 1800 - $time) / 3600));
	$end = sprintf("'-%dh'\\\n", int(($now + 1800 - $time - $range) / 3600)) if $range > 0;

#
#	Establish output directory and configuration file.
#
	if (!(-e "$ENV{'HOME'}/mg/etc/munin.conf")) {
		system("mkdir -p $ENV{'HOME'}/mg/etc");
		open(CF, ">$ENV{'HOME'}/mg/etc/munin.conf");
		printf CF "htmldir $ENV{'HOME'}/mg/etc\nlogdir $ENV{'HOME'}/mg/etc\nrundir $ENV{'HOME'}/mg/etc\n";
		@x = `cat /etc/munin/munin.conf`;
		for ($i=0; $i<=$#x; $i++) {
			next if $x[$i] =~ /htmldir|logdir|rundir/;
			printf CF $x[$i];
		}
		close(CF);
	}

#
#	Run munin-graph. Retrieve and modify resulting rrdtool graph parameters.
#
	@x = `/usr/share/munin/munin-graph --config /home/crlb/mg/etc/munin.conf --nolazy --host $hval  --service $sval --noweek --nomonth --noyear --debug  2>&1 | awk '/\\\\/'`;
	for ($i=0; $i<=$#x; $i++) {
		chop($x[$i]);
		chop($x[$i]) if $i < $#x;

				$x[$i] =~ s/ - by day//;
                $x[$i] = "'/home/crlb/mg/current.png'" if $x[$i] =~ /\.png/;
                $x[$i+1] = $start if $x[$i] =~ /--start/;
                if ($x[$i] =~ /--end/) {
					if ($range == 0 ) {
						$x[$i] = '';
						$x[$i+1] = '';
					} else {
						$x[$i+1] = $end;
					}
				}
                $x[$i+1] = "'$Hval'\\\n" if $x[$i] =~ /--height/;
                $x[$i+1] = "'$Wval'\\\n" if $x[$i] =~ /--width/;

				if ($nval) {
#					$x[$i] = '' if $x[$i] =~ /COMMENT/ && $x[$i] !~ /Last update/;
					$x[$i] = '' if $x[$i] =~ /COMMENT/;
					$x[$i] = '' if $x[$i] =~ /GPRINT/;
				}
	}

#
#	Run the modified rrdtool graph.
#
	$x = join(' ', @x);
#	print "$x\n";
	@x = `rm -f '$ENV{'HOME'}/mg/current.png'; $x`;

#
#	If requested, keep permanent copy of graph file.
#
	if ($cval) {
		$x = $range / 3600;
		$y = sprintf('%s-%s-%s-%s-%sx%s.png', $hval, $sval, $time, $x, $Hval, $Wval);
		system("cd $ENV{'HOME'}/mg; cp -f current.png '$y'");
	}
